<?php

namespace PrimeSoftware\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Attribute\Route;

abstract class SubPageController extends BasePageController {

    /**
     * @var CLass for parent object
     */
    protected $parent_class;

    /**
     * @var string for parent setting
     */
    protected $parent_setter = 'setCompany';

    #region Main index section - search / home page
    /**
     * @param Request $request
     * @return Response
     */
    #[Route('/', methods: ['GET'])]
    public function mainIndex( Request $request, int $parentId = null ) {
        return $this->allIndex( $request, false, $this->getParentObject( $parentId ) );
    }

    /**
     * @param Request $request
     * @return Response
     */
    #[Route('/subindex/', methods: ['GET'])]
    public function subIndex( Request $request, $parentId = null ) {
        return $this->allIndex( $request, true, $this->getParentObject( $parentId ) );
    }
    #endregion

    #region Search - run search
    /**
     * @return Response
     */
    #[Route('/search/', methods: ['GET', 'POST'])]
    public function search( Request $request, $parentId = null ) {
        return $this->_runSearch( $request, $this->getParentObject( $parentId ) );
    }
    #endregion

    #region Manage
    /**
     * @return Response
     */
    #[Route('/{id}', methods: ['GET'], requirements: ['id'=>'\d+'])]
    public function welcome( Request $request, $id, $parentId = null ) {
        return $this->allWelcome( $request, $id, false, $this->getParentObject( $parentId ) );
    }

    /**
     * @return Response
     */
    #[Route('/subwelcome/{id}', methods: ['GET'], requirements: ['id'=>'\d+'])]
    public function subWelcome( Request $request, $id, $parentId = null ) {
        return $this->allWelcome( $request, $id, true, $this->getParentObject( $parentId ) );
    }
    #endregion

    #region Save
    /**
     * @return Response
     */
    #[Route('/create', methods: ['POST'])]
    public function create( Request $request, $parentId = null ) : JsonResponse {
        $this->updateIsApi($request);

        return $this->_store( $request, null, $parentId );
    }

    protected function _handleExtraFormData($object, $form, $data, $parent_id = null): bool
    {
        if ( ! empty( $this->parent_setter ) && $object->getId() == null ) {
            $parentObject = $this->getParentObject($parent_id);
            $setFunction = $this->parent_setter;
            $object->$setFunction($parentObject);
        }
        return parent::_handleExtraFormData($object, $form, $data, $parent_id); // TODO: Change the autogenerated stub
    }
    #endregion

    #region Support functions
    /**
     * Get the individual item
     * @param $id
     * @return mixed
     */
    protected function getParentObject( $id ) {
        if ( $id == null ) {
            return null;
        }
        return $this->em->find( $this->parent_class, $id );
    }
    #endregion
}
